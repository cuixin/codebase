#! /bin/bash

LUA="luajit2"
if [ -z "$(which ${LUA})" ]; then
  LUA="lua"

  if [ -z "$(which ${LUA})" ]; then
    echo "Error: luajit2 and lua executables not found" >&2
    exit 1
  fi
fi

ROOT="${BASH_SOURCE[0]}";
if([ -h "${ROOT}" ]) then
  while([ -h "${ROOT}" ]) do ROOT=`readlink "${ROOT}"`; done
fi
ROOT=$(cd `dirname "${ROOT}"` && pwd)

${LUA} - "${ROOT}" $@ <<EOF
--------------------------------------------------------------------------------

local ROOT = assert(select(1, ...) or nil)
local CLUSTER_NAME = assert(select(2, ...) or nil)

--------------------------------------------------------------------------------

pcall(require, 'luarocks.require') -- Ignoring errors

--------------------------------------------------------------------------------

require 'lua-nucleo.module'
require 'lua-nucleo.strict'
require 'lua-aplicado.module'

require = import 'lua-nucleo/require_and_declare.lua' { 'require_and_declare' }

require 'lfs'

--------------------------------------------------------------------------------

import 'pk-core/common_logging.lua' { 'create_common_stdout_logging' } ()

--------------------------------------------------------------------------------

local fill_curly_placeholders,
      make_concatter
      = import 'lua-nucleo/string.lua'
      {
        'fill_curly_placeholders',
        'make_concatter'
      }

local find_all_files,
      read_file,
      write_file
      = import 'lua-aplicado/filesystem.lua'
      {
        'find_all_files',
        'read_file',
        'write_file'
      }

--------------------------------------------------------------------------------

local Q = function(s) return ("%q"):format(s) end

--------------------------------------------------------------------------------

local TEMPLATE = assert(read_file(ROOT .. "/../cluster/rockspec.template"))

--------------------------------------------------------------------------------

assert(
    write_file(
        ROOT .. "/../cluster/" .. CLUSTER_NAME
     .. "/rockspec/#{PROJECT_NAME}.nginx." .. CLUSTER_NAME .. "-scm-1"
     .. ".rockspec",
        fill_curly_placeholders(
            TEMPLATE,
            {
              NAME = "#{PROJECT_NAME}.nginx." .. CLUSTER_NAME;
              TITLE = "#{PROJECT_NAME}";
              VERSION = "scm-1";
              CLUSTER_NAME = CLUSTER_NAME;
            }
          )
      )
  )

EOF
