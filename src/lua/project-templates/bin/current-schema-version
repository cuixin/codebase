#! /usr/bin/env pk-lua-interpreter

--------------------------------------------------------------------------------
-- current-schema-version: prints current schema version
--------------------------------------------------------------------------------

pcall(require, 'luarocks.require')
require 'lua-nucleo.module'
require 'lua-nucleo.strict'
require = import 'lua-nucleo.require_and_declare' { 'require_and_declare' }

--------------------------------------------------------------------------------

import 'pk-core/common_logging.lua' { 'create_common_stdout_logging' } ()

local log, dbg, spam, log_error
      = import 'pk-core/log.lua' { 'make_loggers' } (
          "current-schema-version", "CSV"
        )

--------------------------------------------------------------------------------

local arguments,
      optional_arguments,
      method_arguments
      = import 'lua-nucleo/args.lua'
      {
        'arguments',
        'optional_arguments',
        'method_arguments'
      }

local load_all_files
      = import 'lua-aplicado/filesystem.lua'
      {
        'load_all_files'
      }

local load_lang_schema_from_chunk
      = import 'pk-logiceditor/schema-lib/util.lua'
      {
        'load_lang_schema_from_chunk'
      }

local validate_lang_schema
      = import 'pk-logiceditor/schema-lib/lang/validate_schema.lua'
      {
        'validate_schema'
      }

local version_to_filename_part
      = import 'pk-logiceditor/schema-lib/util.lua'
      {
        'version_to_filename_part'
      }

--------------------------------------------------------------------------------

local lang_schema_dir = assert(select(1, ...), "missing lang schema dir")

local lang_schema = assert(
    load_lang_schema_from_chunk(
        assert(
            load_all_files(
               lang_schema_dir,
               "^.+\.lua$"
              )
          )
      )
  )

-- TODO: We don't need the validation itself
local schema_version = assert(validate_lang_schema(lang_schema))

io.stdout:write(version_to_filename_part(schema_version), "\n")
io.stdout:flush()
